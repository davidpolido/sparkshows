{"version":3,"file":"pivotLonger.js","sources":["../../src/pivotLonger.ts"],"sourcesContent":["import { SingleOrArray } from './helpers/singleOrArray';\nimport { TidyFn, Key } from './types';\nimport { processSelectors } from './select';\n\ntype PivotLongerOptions = {\n  cols?: any; // Typescript gives me max call stack failed if I use KeysInput from `select`\n  namesTo: SingleOrArray<Key>;\n  namesSep?: string;\n  valuesTo: SingleOrArray<Key>;\n};\n\ntype PivotOutput = Record<Key, any>;\n\nexport function pivotLonger<T extends object>(\n  options: PivotLongerOptions\n): TidyFn<T, PivotOutput> {\n  const _pivotLonger: TidyFn<T, PivotOutput> = (items: T[]): PivotOutput[] => {\n    const { namesTo, valuesTo, namesSep = '_' } = options;\n    const cols = options.cols ?? [];\n    const colsKeys = processSelectors(items, cols) as (keyof T)[];\n\n    const namesToKeys = Array.isArray(namesTo) ? namesTo : [namesTo];\n    const valuesToKeys = Array.isArray(valuesTo) ? valuesTo : [valuesTo];\n    const hasMultipleNamesTo = namesToKeys.length > 1;\n    const hasMultipleValuesTo = valuesToKeys.length > 1;\n\n    const longer: PivotOutput[] = [];\n\n    // expand each item into multiple items\n    for (const item of items) {\n      // keys not included in colsKeys must be kept\n      const remainingKeys = Object.keys(item).filter(\n        (key) => !colsKeys.includes(key as keyof T)\n      ) as (keyof T)[];\n\n      // the keys not in `cols` are the same for each row\n      const baseObj = {} as PivotOutput;\n      for (const key of remainingKeys) {\n        baseObj[key as keyof PivotOutput] = item[key];\n      }\n\n      // remove the `${valueKey}_` prefix when we have multiple values\n      const nameValueKeysWithoutValuePrefix = hasMultipleValuesTo\n        ? Array.from(\n            new Set(\n              colsKeys.map((key) =>\n                (key as string).substring((key as string).indexOf(namesSep) + 1)\n              )\n            )\n          )\n        : colsKeys;\n\n      // e.g. `nameValue` or `nameValue1_nameValue2`\n      for (const nameValue of nameValueKeysWithoutValuePrefix) {\n        const entryObj = { ...baseObj };\n        for (const valueKey of valuesToKeys) {\n          // e.g. `valueKey_nameValue1_nameValue2`\n          const itemKey = hasMultipleValuesTo\n            ? `${valueKey}${namesSep}${nameValue}`\n            : nameValue;\n          const nameValueParts = hasMultipleNamesTo\n            ? (nameValue as string).split(namesSep)\n            : [nameValue];\n\n          let i = 0;\n          for (const nameKey of namesToKeys) {\n            const nameValuePart = nameValueParts[i++];\n            entryObj[nameKey] = nameValuePart;\n            entryObj[valueKey] = item[itemKey as keyof T];\n          }\n        }\n\n        longer.push(entryObj);\n      }\n    }\n\n    return longer;\n  };\n\n  return _pivotLonger;\n}\n"],"names":[],"mappings":";;qBAcE;AAEA,QAAM,eAAuC,CAAC;AAhBhD;AAiBI,UAAM,CAAE,SAAS,UAAU,WAAW,OAAQ;AAC9C,UAAM,OAAO,cAAQ,SAAR,YAAgB;AAC7B,UAAM,WAAW,iBAAiB,OAAO;AAEzC,UAAM,cAAc,MAAM,QAAQ,WAAW,UAAU,CAAC;AACxD,UAAM,eAAe,MAAM,QAAQ,YAAY,WAAW,CAAC;AAC3D,UAAM,qBAAqB,YAAY,SAAS;AAChD,UAAM,sBAAsB,aAAa,SAAS;AAElD,UAAM,SAAwB;AAG9B,eAAW,QAAQ;AAEjB,YAAM,gBAAgB,OAAO,KAAK,MAAM,OACtC,CAAC,QAAQ,CAAC,SAAS,SAAS;AAI9B,YAAM,UAAU;AAChB,iBAAW,OAAO;AAChB,gBAAQ,OAA4B,KAAK;AAAA;AAI3C,YAAM,kCAAkC,sBACpC,MAAM,KACJ,IAAI,IACF,SAAS,IAAI,CAAC,QACX,IAAe,UAAW,IAAe,QAAQ,YAAY,QAIpE;AAGJ,iBAAW,aAAa;AACtB,cAAM,WAAW,IAAK;AACtB,mBAAW,YAAY;AAErB,gBAAM,UAAU,sBACZ,GAAG,WAAW,WAAW,cACzB;AACJ,gBAAM,iBAAiB,qBAClB,UAAqB,MAAM,YAC5B,CAAC;AAEL,cAAI,IAAI;AACR,qBAAW,WAAW;AACpB,kBAAM,gBAAgB,eAAe;AACrC,qBAAS,WAAW;AACpB,qBAAS,YAAY,KAAK;AAAA;AAAA;AAI9B,eAAO,KAAK;AAAA;AAAA;AAIhB,WAAO;AAAA;AAGT,SAAO;AAAA;;;;"}