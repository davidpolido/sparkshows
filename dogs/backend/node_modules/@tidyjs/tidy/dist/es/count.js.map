{"version":3,"file":"count.js","sources":["../../src/count.ts"],"sourcesContent":["import { arrange, desc } from './arrange';\nimport { groupBy } from './groupBy';\nimport { identity } from './helpers/identity';\nimport { SingleOrArray } from './helpers/singleOrArray';\nimport { tally } from './tally';\nimport { tidy } from './tidy';\nimport { KeyOrFn } from './types';\n\ntype CountOptions = {\n  name?: string;\n  sort?: boolean;\n  wt?: string;\n};\n\n/**\n * Tallies the number distinct values for the specified keys and adds\n * the count as a new key (default `n`). Optionally sorts by the count.\n */\nexport function count<T extends object, Keys extends SingleOrArray<KeyOrFn<T>>>(\n  groupKeys: Keys,\n  options?: CountOptions | null | undefined\n) {\n  const _count = (items: T[]) => {\n    options = options ?? {};\n    const { name = 'n', sort } = options;\n\n    const results = tidy(\n      items,\n      groupBy(groupKeys, [tally(options)]),\n      sort ? arrange(desc(name)) : identity\n    );\n\n    return results;\n  };\n\n  return _count;\n}\n"],"names":[],"mappings":";;;;;;eAmBE,WACA;AAEA,QAAM,SAAS,CAAC;AACd,cAAU,4BAAW;AACrB,UAAM,CAAE,OAAO,KAAK,QAAS;AAE7B,UAAM,UAAU,KACd,OACA,QAAQ,WAAW,CAAC,MAAM,YAC1B,OAAO,QAAQ,KAAK,SAAS;AAG/B,WAAO;AAAA;AAGT,SAAO;AAAA;;;;"}