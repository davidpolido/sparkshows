{"version":3,"file":"roll.js","sources":["../../../src/vector/roll.ts"],"sourcesContent":["type RollOptions = {\n  partial?: boolean;\n};\n\n/**\n * Returns a function that computes the a rolling value (e.g. moving average) by\n * applying a function over a window of data\n * @param width The size of the window\n * @param rollFn The function to apply to the window (should reduce to a single value)\n * @param options Options to configure roll. e.g. whether to run on partial windows.\n */\nexport function roll<T extends object>(\n  width: number,\n  rollFn: (itemsInWindow: T[], endIndex: number) => any,\n  options?: RollOptions | undefined | null\n) {\n  const { partial = false } = options ?? {};\n\n  return (items: any[]) => {\n    return items.map((_, i) => {\n      const endIndex = i;\n\n      // partial window and we don't allow partial computation, return undefined\n      if (!partial && endIndex - width + 1 < 0) {\n        return undefined;\n      }\n\n      const startIndex = Math.max(0, endIndex - width + 1);\n      const itemsInWindow = items.slice(startIndex, endIndex + 1);\n\n      // reduce them to a single value\n      return rollFn(itemsInWindow, endIndex);\n    });\n  };\n}\n"],"names":[],"mappings":"cAYE,OACA,QACA;AAEA,QAAM,CAAE,UAAU,SAAU,4BAAW;AAEvC,SAAO,CAAC;AACN,WAAO,MAAM,IAAI,CAAC,GAAG;AACnB,YAAM,WAAW;AAGjB,UAAI,CAAC,WAAW,WAAW,QAAQ,IAAI;AACrC,eAAO;AAAA;AAGT,YAAM,aAAa,KAAK,IAAI,GAAG,WAAW,QAAQ;AAClD,YAAM,gBAAgB,MAAM,MAAM,YAAY,WAAW;AAGzD,aAAO,OAAO,eAAe;AAAA;AAAA;AAAA;;;;"}