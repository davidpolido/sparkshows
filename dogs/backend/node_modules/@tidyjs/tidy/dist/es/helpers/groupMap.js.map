{"version":3,"file":"groupMap.js","sources":["../../../src/helpers/groupMap.ts"],"sourcesContent":["import { Grouped } from '../types';\nimport { groupTraversal } from './groupTraversal';\n\nexport function groupMap<T extends object, OutputT extends object = T>(\n  grouped: Grouped<T>,\n  groupFn: (items: T[], keys: any[]) => OutputT[],\n  keyFn: (keys: any[]) => any = (keys) =>\n    keys[\n      keys.length - 1\n    ] /* optional func to transform key based on all keys in map so far */\n): Grouped<OutputT> {\n  function addSubgroup(parentGrouped: Grouped<OutputT>, keys: any[]) {\n    const subgroup = new Map();\n    parentGrouped.set(keyFn(keys), subgroup);\n    return subgroup;\n  }\n\n  function addLeaves(\n    parentGrouped: Grouped<OutputT>,\n    keys: any[],\n    values: T[]\n  ) {\n    parentGrouped.set(keyFn(keys), groupFn(values, keys));\n  }\n\n  const outputGrouped: Grouped<OutputT> = new Map();\n\n  groupTraversal(grouped, outputGrouped, [], addSubgroup, addLeaves);\n\n  return outputGrouped;\n}\n"],"names":[],"mappings":";;kBAIE,SACA,SACA,QAA8B,CAAC,SAC7B,KACE,KAAK,SAAS;AAGlB,uBAAqB,eAAiC;AACpD,UAAM,WAAW,IAAI;AACrB,kBAAc,IAAI,MAAM,OAAO;AAC/B,WAAO;AAAA;AAGT,qBACE,eACA,MACA;AAEA,kBAAc,IAAI,MAAM,OAAO,QAAQ,QAAQ;AAAA;AAGjD,QAAM,gBAAkC,IAAI;AAE5C,iBAAe,SAAS,eAAe,IAAI,aAAa;AAExD,SAAO;AAAA;;;;"}