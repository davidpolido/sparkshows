{"version":3,"file":"keysFromItems.js","sources":["../../../src/helpers/keysFromItems.ts"],"sourcesContent":["/**\n * Helper to get keys from a collection of items.\n * For now, it naively just looks at the first item, but a more complete\n * solution involves looking at all of them (in case keys are omitted).\n * This isn't very efficient though, so perhaps there's a future where\n * the keys are stored sneakily on the object somewhere and that set\n * is updated after each tidy fn is called (if we can do it efficiently)\n *\n * Or perhaps this function can be memoized in a smart way where we don't\n * call it more than necessary?\n */\nexport function keysFromItems<T extends object>(items: T[]): (keyof T)[] {\n  if (items.length < 1) return [];\n  const keys = Object.keys(items[0]) as (keyof T)[];\n  return keys;\n}\n"],"names":[],"mappings":"uBAWgD;AAC9C,MAAI,MAAM,SAAS;AAAG,WAAO;AAC7B,QAAM,OAAO,OAAO,KAAK,MAAM;AAC/B,SAAO;AAAA;;;;"}