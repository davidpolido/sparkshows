{"version":3,"file":"groupTraversal.js","sources":["../../../src/helpers/groupTraversal.ts"],"sourcesContent":["import { Grouped, Datum } from '../types';\n\n/**\n * Traverse the leaves of the grouped items and and run the\n * groupFn on them. Basically an in-order traversal. Can you\n * believe this is real and not part of a coding interview??\n */\nexport function groupTraversal<\n  T extends object,\n  T2 extends Datum = T,\n  OutputType = Grouped<T2>\n>(\n  grouped: Grouped<T>,\n  outputGrouped: OutputType,\n  keys: any[],\n  addSubgroup: (root: OutputType, keys: any[], level: number) => OutputType,\n  addLeaves: (root: OutputType, keys: any[], items: T[], level: number) => void,\n  level: number = 0\n) {\n  for (const [key, value] of grouped.entries()) {\n    const keysHere = [...keys, key];\n\n    // internal node\n    if (value instanceof Map) {\n      const subgroup = addSubgroup(outputGrouped, keysHere, level);\n\n      // recurse\n      groupTraversal(\n        value,\n        subgroup,\n        keysHere,\n        addSubgroup,\n        addLeaves,\n        level + 1\n      );\n    } else {\n      // leaf\n      addLeaves(outputGrouped, keysHere, value, level);\n    }\n  }\n\n  return outputGrouped;\n}\n"],"names":[],"mappings":"wBAYE,SACA,eACA,MACA,aACA,WACA,QAAgB;AAEhB,aAAW,CAAC,KAAK,UAAU,QAAQ;AACjC,UAAM,WAAW,CAAC,GAAG,MAAM;AAG3B,QAAI,iBAAiB;AACnB,YAAM,WAAW,YAAY,eAAe,UAAU;AAGtD,qBACE,OACA,UACA,UACA,aACA,WACA,QAAQ;AAAA;AAIV,gBAAU,eAAe,UAAU,OAAO;AAAA;AAAA;AAI9C,SAAO;AAAA;;;;"}