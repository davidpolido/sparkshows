{"version":3,"file":"summation.js","sources":["../../../src/helpers/summation.ts"],"sourcesContent":["import { fsum, Adder } from 'd3-array';\n\n// See also https://observablehq.com/@fil/fcumsum\nexport function fcumsum<T>(\n  items: T[],\n  accessor: (element: T, i: number, array: Iterable<T>) => any\n): Float64Array {\n  let sum = new Adder(),\n    i = 0;\n\n  return Float64Array.from(\n    items,\n    // we do not actually need to coerce the Adder to number,\n    // as @Fil demonstrated here: https://github.com/pbeshai/tidy/pull/5\n    // so we can just tell typescript to be quiet.\n    (value: T): number =>\n      (sum.add(+(accessor(value, i++, items) || 0)) as unknown) as number\n  );\n}\n\nexport function mean<T>(\n  items: T[],\n  accessor: (element: T, i: number, array: Iterable<T>) => any\n): number | undefined {\n  let n = 0;\n  for (let i = 0; i < items.length; ++i) {\n    const value = accessor(items[i], i, items);\n    // count it if we have a valid number\n    if (+value === value) {\n      n += 1;\n    }\n  }\n\n  return n ? fsum(items, accessor) / n : undefined;\n}\n"],"names":[],"mappings":";;iBAIE,OACA;AAEA,MAAI,MAAM,IAAI,SACZ,IAAI;AAEN,SAAO,aAAa,KAClB,OAIA,CAAC,UACE,IAAI,IAAI,WAAW,OAAO,KAAK,UAAU;AAAA;cAK9C,OACA;AAEA,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE;AAClC,UAAM,QAAQ,SAAS,MAAM,IAAI,GAAG;AAEpC,QAAI,CAAC,UAAU;AACb,WAAK;AAAA;AAAA;AAIT,SAAO,IAAI,KAAK,OAAO,YAAY,IAAI;AAAA;;;;"}