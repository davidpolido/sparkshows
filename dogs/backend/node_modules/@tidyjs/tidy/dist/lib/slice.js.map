{"version":3,"file":"slice.js","sources":["../../src/slice.ts"],"sourcesContent":["import { shuffle } from 'd3-array';\nimport { arrange } from './arrange';\nimport { SingleOrArray } from './helpers/singleOrArray';\nimport { Comparator, Key, TidyFn } from './types';\n\n/**\n * Truncates the array to the specified range\n */\nexport function slice<T extends object>(\n  start: number,\n  end?: number\n): TidyFn<T> {\n  const _slice: TidyFn<T> = (items: T[]): T[] => items.slice(start, end);\n\n  return _slice;\n}\n\n// -------------------------------------------------------------------\n/**\n * Truncates the array to the first N items\n */\nexport const sliceHead = <T extends object>(n: number) => slice<T>(0, n);\n\n// -------------------------------------------------------------------\n/**\n * Truncates the array to the last N items\n */\nexport const sliceTail = <T extends object>(n: number) => slice<T>(-n);\n\n// -------------------------------------------------------------------\n\n/**\n * Truncates the array to the first N items ordered by some key\n */\nexport function sliceMin<T extends object>(\n  n: number,\n  orderBy: SingleOrArray<Key | Comparator<T>>\n): TidyFn<T> {\n  const _sliceMin: TidyFn<T> = (items: T[]): T[] =>\n    arrange<T>(orderBy)(items).slice(0, n);\n\n  return _sliceMin;\n}\n\n// -------------------------------------------------------------------\n\n/**\n * Truncates the array to the last N items ordered by some key\n */\nexport function sliceMax<T extends object>(\n  n: number,\n  orderBy: SingleOrArray<Key | Comparator<T>>\n): TidyFn<T> {\n  const _sliceMax: TidyFn<T> = (items: T[]): T[] =>\n    arrange<T>(orderBy)(items).slice(-n).reverse();\n\n  return _sliceMax;\n}\n\n// -------------------------------------------------------------------\n\ntype SampleOptions = {\n  replace?: boolean;\n};\n/**\n * Truncates the array to the last N items ordered by some key\n */\nexport function sliceSample<T extends object>(\n  n: number,\n  options?: SampleOptions | null | undefined\n): TidyFn<T> {\n  options = options ?? {};\n  const { replace } = options;\n\n  const _sliceSample: TidyFn<T> = (items: T[]) => {\n    if (!items.length) return items.slice();\n\n    // sample items with replacement\n    if (replace) {\n      const sliced = [];\n      for (let i = 0; i < n; ++i) {\n        sliced.push(items[Math.floor(Math.random() * items.length)]);\n      }\n      return sliced;\n    }\n\n    // sample items without replacement\n    return shuffle(items.slice()).slice(0, n);\n  };\n\n  return _sliceSample;\n}\n"],"names":["arrange","shuffle"],"mappings":";;;;;;;eASE,OACA;AAEA,QAAM,SAAoB,CAAC,UAAoB,MAAM,MAAM,OAAO;AAElE,SAAO;AAAA;MAOI,YAAY,CAAmB,MAAc,MAAS,GAAG;MAMzD,YAAY,CAAmB,MAAc,MAAS,CAAC;kBAQlE,GACA;AAEA,QAAM,YAAuB,CAAC,UAC5BA,gBAAW,SAAS,OAAO,MAAM,GAAG;AAEtC,SAAO;AAAA;kBASP,GACA;AAEA,QAAM,YAAuB,CAAC,UAC5BA,gBAAW,SAAS,OAAO,MAAM,CAAC,GAAG;AAEvC,SAAO;AAAA;qBAYP,GACA;AAEA,YAAU,4BAAW;AACrB,QAAM,CAAE,WAAY;AAEpB,QAAM,eAA0B,CAAC;AAC/B,QAAI,CAAC,MAAM;AAAQ,aAAO,MAAM;AAGhC,QAAI;AACF,YAAM,SAAS;AACf,eAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AACvB,eAAO,KAAK,MAAM,KAAK,MAAM,KAAK,WAAW,MAAM;AAAA;AAErD,aAAO;AAAA;AAIT,WAAOC,gBAAQ,MAAM,SAAS,MAAM,GAAG;AAAA;AAGzC,SAAO;AAAA;;;;;;;;;"}