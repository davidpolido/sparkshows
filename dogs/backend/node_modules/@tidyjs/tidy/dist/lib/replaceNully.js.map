{"version":3,"file":"replaceNully.js","sources":["../../src/replaceNully.ts"],"sourcesContent":["import { O } from 'ts-toolbelt';\nimport { TidyFn } from './types';\n\ntype Spec<T extends object> = {\n  [K in keyof T]: T[K];\n};\n\ntype Output<T extends object, ReplaceSpec extends Partial<Spec<T>>> = O.Merge<\n  Omit<T, keyof ReplaceSpec>,\n  {\n    [K in keyof ReplaceSpec]: K extends keyof T\n      ? Exclude<T[K], null | undefined> | ReplaceSpec[K]\n      : ReplaceSpec[K];\n  }\n>;\n\n/**\n * Replaces nully values with what is specified in the spec\n */\nexport function replaceNully<\n  T extends object,\n  ReplaceSpec extends Spec<Partial<T>> = Spec<Partial<T>>\n>(replaceSpec: ReplaceSpec): TidyFn<T, Output<T, ReplaceSpec>> {\n  const _replaceNully: TidyFn<T, Output<T, ReplaceSpec>> = (\n    items: T[]\n  ): Output<T, ReplaceSpec>[] => {\n    const replacedItems: Output<T, ReplaceSpec>[] = [];\n\n    for (const d of items) {\n      const obj = { ...d } as any;\n      for (const key in replaceSpec) {\n        if (obj[(key as unknown) as keyof T] == null) {\n          obj[(key as unknown) as keyof T] = replaceSpec[key] as any;\n        }\n      }\n      replacedItems.push(obj);\n    }\n\n    return replacedItems;\n  };\n\n  return _replaceNully;\n}\n"],"names":[],"mappings":";;;;sBAsBE;AACA,QAAM,gBAAmD,CACvD;AAEA,UAAM,gBAA0C;AAEhD,eAAW,KAAK;AACd,YAAM,MAAM,IAAK;AACjB,iBAAW,OAAO;AAChB,YAAI,IAAK,QAA+B;AACtC,cAAK,OAA8B,YAAY;AAAA;AAAA;AAGnD,oBAAc,KAAK;AAAA;AAGrB,WAAO;AAAA;AAGT,SAAO;AAAA;;;;"}