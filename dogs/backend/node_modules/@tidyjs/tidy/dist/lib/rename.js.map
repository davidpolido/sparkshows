{"version":3,"file":"rename.js","sources":["../../src/rename.ts"],"sourcesContent":["import { O } from 'ts-toolbelt';\nimport { TidyFn } from './types';\n\ntype RenameSpec<T> = Partial<\n  {\n    [K in keyof T]: string;\n  }\n>;\n\n// helper types\ntype OutputT<T extends object, Spec extends RenameSpec<T>> = O.Merge<\n  Omit<T, keyof Spec>,\n  {\n    [NewKey in Exclude<Spec[keyof Spec], undefined>]: T[O.SelectKeys<\n      Spec,\n      NewKey\n    >];\n  }\n>;\n\n/**\n * Renames properties/columns in collection\n *\n * @param renameSpec Mapping of current name to new name { currKey: newKey }\n */\nexport function rename<T extends object, Spec extends RenameSpec<T>>(\n  renameSpec: Spec\n): TidyFn<T, OutputT<T, Spec>> {\n  type Output = OutputT<T, Spec>;\n  const _rename: TidyFn<T, Output> = (items: T[]): Output[] => {\n    return items.map((d) => {\n      const mapped = {} as any;\n      const keys = Object.keys(d) as (keyof T)[];\n      for (const key of keys) {\n        const newKey: keyof Output =\n          ((renameSpec[key] as unknown) as keyof Output) ?? key;\n        mapped[newKey] = d[key];\n      }\n\n      return mapped as Output;\n    });\n  };\n\n  return _rename;\n}\n"],"names":[],"mappings":";;;;gBA0BE;AAGA,QAAM,UAA6B,CAAC;AAClC,WAAO,MAAM,IAAI,CAAC;AA9BtB;AA+BM,YAAM,SAAS;AACf,YAAM,OAAO,OAAO,KAAK;AACzB,iBAAW,OAAO;AAChB,cAAM,SACF,iBAAW,SAAX,YAAgD;AACpD,eAAO,UAAU,EAAE;AAAA;AAGrB,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;;;;"}