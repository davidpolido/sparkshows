{"version":3,"file":"negate.js","sources":["../../../src/selectors/negate.ts"],"sourcesContent":["import { SingleOrArray, singleOrArray } from '../helpers/singleOrArray';\n\n/**\n * Given a set of selectors, inverts their output to be drop keys. e.g.,\n * `key` becomes `-key`.\n */\nexport function negate<T extends object>(\n  selectors: SingleOrArray<keyof T | ((items: T[]) => (keyof T)[])>\n) {\n  return (items: T[]) => {\n    let keySet = new Set<keyof T>();\n    for (const selector of singleOrArray(selectors as any)) {\n      if (typeof selector === 'function') {\n        const keys = selector(items) as (keyof T)[];\n        for (const key of keys) {\n          keySet.add(key);\n        }\n      } else {\n        keySet.add(selector);\n      }\n    }\n    const keys = Array.from(keySet).map((key) => `-${key}`);\n    return keys as (keyof T)[];\n  };\n}\n"],"names":["singleOrArray"],"mappings":";;;;;;gBAOE;AAEA,SAAO,CAAC;AACN,QAAI,SAAS,IAAI;AACjB,eAAW,YAAYA,4BAAc;AACnC,UAAI,OAAO,aAAa;AACtB,cAAM,QAAO,SAAS;AACtB,mBAAW,OAAO;AAChB,iBAAO,IAAI;AAAA;AAAA;AAGb,eAAO,IAAI;AAAA;AAAA;AAGf,UAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAC,QAAQ,IAAI;AACjD,WAAO;AAAA;AAAA;;;;"}